set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
set(EDL_SEARCH_PATHS Enclave)
set(E_SRCS Enclave/Enclave.cpp)
#makes no sense in this context, but can be useful in a real world example so that different configs can be used for debug/release
if(SGX_HW AND SGX_MODE STREQUAL "Release")
    set(LDS Enclave/Enclave.lds)
else()
    set(LDS Enclave/Enclave.lds)
endif()
add_enclave_library(numatestenclave SRCS ${E_SRCS} EDL Enclave/Enclave.edl EDL_SEARCH_PATHS ${EDL_SEARCH_PATHS} LDSCRIPT ${LDS})
enclave_sign(numatestenclave KEY Enclave/Enclave_private.pem CONFIG Enclave/Enclave.config.xml)

option(VTUNE "Enable VTUNE" 1)
set(SRCS App/App.cpp App/config.cpp)
add_untrusted_executable(NUMAExp SRCS ${SRCS} EDL Enclave/Enclave.edl EDL_SEARCH_PATHS ${EDL_SEARCH_PATHS})
target_compile_definitions(NUMAExp PRIVATE VTUNE=${VTUNE})
target_include_directories(NUMAExp PRIVATE ${SGX_INCLUDE_DIR})
target_link_libraries(NUMAExp  perfevent shared_headers gflags)
add_dependencies(NUMAExp numatestenclave-sign)

set(SRCS_UNTRUSTED App/App_untrusted.cpp App/config.cpp)
add_executable(NUMAExp_untrusted ${SRCS_UNTRUSTED})
set_target_properties(NUMAExp_untrusted PROPERTIES COMPILE_FLAGS ${APP_CXX_FLAGS})
target_link_libraries(NUMAExp_untrusted  perfevent shared_headers gflags)
